{"version":3,"sources":["webpack:///path---mobx-learning-b3e5dec0a2cbe193f146.js","webpack:///./.cache/json/mobx-learning.json"],"names":["webpackJsonp","317","module","exports","data","markdownRemark","html","frontmatter","title","date","path","tags","excerpt","pathContext","next","prev","id"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA,+5HAAyiGC,aAA44BC,MAAA,gBAAAC,KAAA,qBAAAC,KAAA,iBAAAC,MAAA,gBAAAC,QAAA,yCAAsJC,aAAgBC,KAAA,KAAAC,MAAoBT,KAAA,miBAAAU,GAAA,+IAAAT,aAA+sBE,KAAA,2BAAAC,KAAA,gCAAAF,MAAA,+BAAAI,QAAA,yDAAAD,MAAA","file":"path---mobx-learning-b3e5dec0a2cbe193f146.js","sourcesContent":["webpackJsonp([116841043811990],{\n\n/***/ 317:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h3>Creating a UserDashboard Store</h3>\\n<p>First I created <code>userDashboardStore.js</code> inside of the <code>state</code> directory. For the time being, I've only added one <code>@observable</code> inside of the class:</p>\\n<pre><code class=\\\"language-javascript\\\">export default class UserDashboardStore {\\n  @observable testString = 'mobx here'\\n}\\n</code></pre>\\n<p>Then following the pattern of the other stores, I added <code>userDashboardStore</code> entries to <code>state/appStore.js</code>.</p>\\n<h3>Injecting into the <code>UserDashboard</code> Screen</h3>\\n<p>In the <code>UserDashboard</code> screen, I imported <code>observer</code> and <code>inject</code> from <code>mobx-react</code>. </p>\\n<p>However, I ran into an error that <code>Store userDashboardStore is not available</code> and needs to be provided by a <code>Provider</code>...</p>\\n<p>I'll come back to this.</p>\\n<h3>Adding <code>userDashboardStore</code> to a <code>Provider</code></h3>\\n<p>First I tried adding a <code>&#x3C;Route></code> for <code>UserContentDashboardRoutes</code> following the pattern as seen in <code>client/app/routes/index.js</code> but the error remained.</p>\\n<p>Then I tried just having <code>ComponentDevRoutes</code> since it's a level up, but that didn't work either.</p>\\n<p>Then I remembered that <code>ComponentDev</code> has its own <code>&#x3C;Provider></code>, so I added the <code>UserDashboardStore</code> stuff there instead:</p>\\n<pre><code class=\\\"language-javascript\\\">import UserContentDashboard from '../../UserContentDashboard/screens/UserContentDashboard'\\n...\\nconst userDashboardStore = new UserDashboardStore()\\n...\\n&#x3C;Provider currentUserStore={currentUserStore} userDashboardStore={userDashboardStore}>\\n</code></pre>\\n<p>The error is fixed!</p>\\n<h3>Back to Injecting the Store</h3>\\n<p>After importing <code>inject</code> and <code>observer</code> from <code>mobx-react</code> I realize that I need to convert the screen into a <code>class</code> instead of a stateless functional component. So I do that, and then I'm able to access my <code>testString</code> from <code>UserDashboardStore</code>!</p>\\n<p>...but my <code>currentUserStore</code> is empty.</p>\\n<h3>Filling up <code>currentUserStore</code></h3>\\n<p>In <code>ComponentDev</code>'s routes, there is a <code>render</code> prop that was just returning <code>&#x3C;UserContentDashboard /></code>. I changed the arrow function from using parens to using brackets, in order to be able to call <code>currentUserStore.loadUser()</code> first:</p>\\n<pre><code class=\\\"language-javascript\\\">&#x3C;Route\\n exact\\n path='/user_dashboard'\\n render={routeProps => {\\n             currentUserStore.loadUser()\\n             return &#x3C;UserContentDashboard {...props} {...routeProps} />\\n            }}\\n/>\\n</code></pre>\\n<p>Now I'm able to access info about the current user!</p>\\n<h3>Updating <code>UserContentDashboard</code></h3>\\n<ul>\\n<li>Instead of a hardcoded <code>userId</code>, I use lodash's <code>get</code> to access <code>currentUserStore.currentUser.id</code>, which is then used for <code>&#x3C;Request></code>ing from the <code>user_content_dashboard</code> endpoint.</li>\\n</ul>\\n<h3>Adding Observables to the <code>UserDashboardStore</code></h3>\\n<p>Looking at Ian's example of how he's integrated MobX into the Instructors screen, I created <code>@observable</code>s for each of the lists on the Dashboard:</p>\\n<pre><code class=\\\"language-javascript\\\">  @observable inProgressContent = []\\n  @observable latestLessons = []\\n  @observable recommendedCourses = []\\n  @observable recommendedLessons = []\\n  @observable inProductionContent = []\\n</code></pre>\\n<p>I also added a <code>constructor</code> as seen in the <code>LessonScreenStore</code>, and updated the <code>ComponentDev</code> routes to pass <code>appStore</code> to <code>UserDashboardStore</code></p>\\n<pre><code class=\\\"language-javascript\\\">const userDashboardStore = new UserDashboardStore(appStore)\\n</code></pre>\",\"frontmatter\":{\"title\":\"Mobx Learning\",\"date\":\"September 20, 2017\",\"path\":\"/mobx-learning\",\"tags\":[\"react\",\"mobx\"],\"excerpt\":\"In which I wire a screen up to MobX\"}}},\"pathContext\":{\"next\":null,\"prev\":{\"html\":\"<p>First, I <a href=\\\"https://aws.amazon.com\\\">signed up for an AWS account</a>. (Have your credit card and phone ready for confirmation).</p>\\n<p>Then I created my first <a href=\\\"https://aws.amazon.com/s3/\\\">S3 bucket</a> (after years of hearing the phrase).\\n<em>NOTE:</em> The bucket has to be named for your domain (In my case, <code>www.taylorlistens.com</code>).</p>\\n<p>I don't need versioning or logging or tags, so I skipped that section of the setup.</p>\\n<p>Since I'm hosting a site, the bucket is set to grant public read access.</p>\",\"id\":\"/Users/taylor/Documents/Projects/taylorlistens/src/pages/2017-09-13-getting-gatsby-hosted-on-aws/index.md absPath of file >>> MarkdownRemark\",\"frontmatter\":{\"date\":\"2017-09-14T03:36:12.423Z\",\"path\":\"/getting-gatsby-hosted-on-aws\",\"title\":\"Getting Gatsby Hosted On AWS\",\"excerpt\":\"Spoiler: Like usual, it was way easier than I thought.\",\"tags\":[\"aws\",\"gatsby\"]}}}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---mobx-learning-b3e5dec0a2cbe193f146.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h3>Creating a UserDashboard Store</h3>\\n<p>First I created <code>userDashboardStore.js</code> inside of the <code>state</code> directory. For the time being, I've only added one <code>@observable</code> inside of the class:</p>\\n<pre><code class=\\\"language-javascript\\\">export default class UserDashboardStore {\\n  @observable testString = 'mobx here'\\n}\\n</code></pre>\\n<p>Then following the pattern of the other stores, I added <code>userDashboardStore</code> entries to <code>state/appStore.js</code>.</p>\\n<h3>Injecting into the <code>UserDashboard</code> Screen</h3>\\n<p>In the <code>UserDashboard</code> screen, I imported <code>observer</code> and <code>inject</code> from <code>mobx-react</code>. </p>\\n<p>However, I ran into an error that <code>Store userDashboardStore is not available</code> and needs to be provided by a <code>Provider</code>...</p>\\n<p>I'll come back to this.</p>\\n<h3>Adding <code>userDashboardStore</code> to a <code>Provider</code></h3>\\n<p>First I tried adding a <code>&#x3C;Route></code> for <code>UserContentDashboardRoutes</code> following the pattern as seen in <code>client/app/routes/index.js</code> but the error remained.</p>\\n<p>Then I tried just having <code>ComponentDevRoutes</code> since it's a level up, but that didn't work either.</p>\\n<p>Then I remembered that <code>ComponentDev</code> has its own <code>&#x3C;Provider></code>, so I added the <code>UserDashboardStore</code> stuff there instead:</p>\\n<pre><code class=\\\"language-javascript\\\">import UserContentDashboard from '../../UserContentDashboard/screens/UserContentDashboard'\\n...\\nconst userDashboardStore = new UserDashboardStore()\\n...\\n&#x3C;Provider currentUserStore={currentUserStore} userDashboardStore={userDashboardStore}>\\n</code></pre>\\n<p>The error is fixed!</p>\\n<h3>Back to Injecting the Store</h3>\\n<p>After importing <code>inject</code> and <code>observer</code> from <code>mobx-react</code> I realize that I need to convert the screen into a <code>class</code> instead of a stateless functional component. So I do that, and then I'm able to access my <code>testString</code> from <code>UserDashboardStore</code>!</p>\\n<p>...but my <code>currentUserStore</code> is empty.</p>\\n<h3>Filling up <code>currentUserStore</code></h3>\\n<p>In <code>ComponentDev</code>'s routes, there is a <code>render</code> prop that was just returning <code>&#x3C;UserContentDashboard /></code>. I changed the arrow function from using parens to using brackets, in order to be able to call <code>currentUserStore.loadUser()</code> first:</p>\\n<pre><code class=\\\"language-javascript\\\">&#x3C;Route\\n exact\\n path='/user_dashboard'\\n render={routeProps => {\\n             currentUserStore.loadUser()\\n             return &#x3C;UserContentDashboard {...props} {...routeProps} />\\n            }}\\n/>\\n</code></pre>\\n<p>Now I'm able to access info about the current user!</p>\\n<h3>Updating <code>UserContentDashboard</code></h3>\\n<ul>\\n<li>Instead of a hardcoded <code>userId</code>, I use lodash's <code>get</code> to access <code>currentUserStore.currentUser.id</code>, which is then used for <code>&#x3C;Request></code>ing from the <code>user_content_dashboard</code> endpoint.</li>\\n</ul>\\n<h3>Adding Observables to the <code>UserDashboardStore</code></h3>\\n<p>Looking at Ian's example of how he's integrated MobX into the Instructors screen, I created <code>@observable</code>s for each of the lists on the Dashboard:</p>\\n<pre><code class=\\\"language-javascript\\\">  @observable inProgressContent = []\\n  @observable latestLessons = []\\n  @observable recommendedCourses = []\\n  @observable recommendedLessons = []\\n  @observable inProductionContent = []\\n</code></pre>\\n<p>I also added a <code>constructor</code> as seen in the <code>LessonScreenStore</code>, and updated the <code>ComponentDev</code> routes to pass <code>appStore</code> to <code>UserDashboardStore</code></p>\\n<pre><code class=\\\"language-javascript\\\">const userDashboardStore = new UserDashboardStore(appStore)\\n</code></pre>\",\"frontmatter\":{\"title\":\"Mobx Learning\",\"date\":\"September 20, 2017\",\"path\":\"/mobx-learning\",\"tags\":[\"react\",\"mobx\"],\"excerpt\":\"In which I wire a screen up to MobX\"}}},\"pathContext\":{\"next\":null,\"prev\":{\"html\":\"<p>First, I <a href=\\\"https://aws.amazon.com\\\">signed up for an AWS account</a>. (Have your credit card and phone ready for confirmation).</p>\\n<p>Then I created my first <a href=\\\"https://aws.amazon.com/s3/\\\">S3 bucket</a> (after years of hearing the phrase).\\n<em>NOTE:</em> The bucket has to be named for your domain (In my case, <code>www.taylorlistens.com</code>).</p>\\n<p>I don't need versioning or logging or tags, so I skipped that section of the setup.</p>\\n<p>Since I'm hosting a site, the bucket is set to grant public read access.</p>\",\"id\":\"/Users/taylor/Documents/Projects/taylorlistens/src/pages/2017-09-13-getting-gatsby-hosted-on-aws/index.md absPath of file >>> MarkdownRemark\",\"frontmatter\":{\"date\":\"2017-09-14T03:36:12.423Z\",\"path\":\"/getting-gatsby-hosted-on-aws\",\"title\":\"Getting Gatsby Hosted On AWS\",\"excerpt\":\"Spoiler: Like usual, it was way easier than I thought.\",\"tags\":[\"aws\",\"gatsby\"]}}}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/mobx-learning.json\n// module id = 317\n// module chunks = 116841043811990"],"sourceRoot":""}