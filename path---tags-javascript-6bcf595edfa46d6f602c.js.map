{"version":3,"sources":["webpack:///path---tags-javascript-6bcf595edfa46d6f602c.js","webpack:///./.cache/json/tags-javascript.json"],"names":["webpackJsonp","378","module","exports","pathContext","posts","html","id","frontmatter","date","path","title","excerpt","tags","tagName"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,aAAeC,QAAUC,KAAA,+3DAAAC,GAAA,4IAAAC,aAAsiEC,KAAA,2BAAAC,KAAA,6BAAAC,MAAA,6BAAAC,QAAA,KAAAC,MAAA,0BAA4JP,KAAA,ygCAAAC,GAAA,4HAAAC,aAAiqCC,KAAA,2BAAAC,KAAA,aAAAC,MAAA,yCAAAC,QAAA,GAAAC,MAAA,uBAAmJP,KAAA,slCAAkQC,GAAA,oIAAAC,aAAm/BC,KAAA,2BAAAC,KAAA,qBAAAC,MAAA,oBAAAC,QAAA,qDAAAC,MAAA,oCAAmMC,QAAA","file":"path---tags-javascript-6bcf595edfa46d6f602c.js","sourcesContent":["webpackJsonp([67335324583948],{\n\n/***/ 378:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"pathContext\":{\"posts\":[{\"html\":\"<h2>Run <code>npm init</code></h2>\\n<p>The first thing I do when starting a new command line node project is to run\\n<code>npm init</code>.</p>\\n<p>This command starts a utility that creates a <code>package.json</code> file for the project. When you run it, you'll be prompted for the answers to several different questions. Hitting enter will accept the default, which is fine. The only thing I change is setting the entry point to <code>src/index.js</code>. If you hit enter too fast, you can always manually edit the <code>package.json</code> file later.</p>\\n<h2>Create the <code>src</code> Directory</h2>\\n<p>Next I create the <code>src</code> folder with <code>mkdir src</code>. I like to put my source code in this directory to avoid having the <code>node_modules</code> directory indexed when I'm using my editor later. I also run <code>touch src/index.js</code> to create a placeholder for the file. If I'm writing a program that has output, I'll also create an <code>output</code> directory in the root of the project.</p>\\n<h2>Starting Version Control</h2>\\n<p>Even if I'm not planning on uploading my code to GitHub, I typically will start tracking by running <code>git init</code> in the root of my project. This will create an empty repository so you can start tracking changes. If you decide to add a GitHub repo later, you can edit the git config to get it set up.</p>\\n<p>When creating a new repository on GitHub, I initialize it without a README or <code>.gitignore</code> file in favor of doing them myself manually later.</p>\\n<p>To add a GitHub repo to the project later, run</p>\\n<pre><code>git remote add origin git@github.com:username/repo-name.git\\n</code></pre>\\n<h2>Adding a <code>.gitignore</code> File</h2>\\n<p>I typically add a <code>.gitignore</code> file that contains the following:</p>\\n<pre><code>node_modules/\\n.env\\n</code></pre>\\n<h2>Finished</h2>\\n<p>That's pretty much it!</p>\",\"id\":\"/Users/taylor/Documents/Projects/taylorlistens/src/pages/2018-06-27-starting-a-nodejs-project/index.md absPath of file >>> MarkdownRemark\",\"frontmatter\":{\"date\":\"2018-06-27T17:30:59.377Z\",\"path\":\"/starting-a-nodejs-project\",\"title\":\"Starting A Node.js Project\",\"excerpt\":null,\"tags\":[\"javascript\",\"nodejs\"]}},{\"html\":\"<p>I made a fork of <a href=\\\"https://github.com/tayiorbeii/tachyons-as-props\\\"><code>tachyons-as-props</code></a> in my quest to replace tachyons + sass with glamorous.</p>\\n<p>A nice way to work on a <code>node_module</code> locally without having to publish it is to use <code>yarn link</code> (or <code>npm link</code> if you're so inclined).</p>\\n<p>The steps are pretty easy:</p>\\n<ol>\\n<li>\\n<p>Go to the local folder of the module you are currently working on:</p>\\n<ul>\\n<li><code>cd module_in_progress</code></li>\\n</ul>\\n</li>\\n<li>\\n<p>Type <code>yarn link</code></p>\\n<ul>\\n<li>You should see a \\\"success\\\" message</li>\\n</ul>\\n</li>\\n<li>\\n<p>Go to your consuming project's folder</p>\\n<ul>\\n<li><code>cd my_project</code></li>\\n</ul>\\n</li>\\n<li>Type <code>yarn link module_in_progress</code></li>\\n</ol>\\n<p>Now if you <code>ls node_modules</code> in your consuming project's folder, you should see that <code>module_in_progress</code> has been symlinked to its folder (as opposed to being installed as normal).</p>\",\"id\":\"/Users/taylor/Documents/Projects/taylorlistens/src/pages/2017-09-13-yarn-link/index.md absPath of file >>> MarkdownRemark\",\"frontmatter\":{\"date\":\"2017-09-13T18:33:28.522Z\",\"path\":\"/yarn-link\",\"title\":\"`yarn link` for npm Module Development\",\"excerpt\":\"\",\"tags\":[\"javascript\",\"npm\"]}},{\"html\":\"<h1><code>NODE_PATH</code> for avoiding <code>../../../</code></h1>\\n<p>When copying out a big component with several subcomponents to a separate <code>create-react-app</code> project, I found myself using tons of relative imports. Counting up &#x26; overs sucks.</p>\\n<p>To help with this, create a <code>.env</code> file in the root of your <code>create-react-app</code> project. Inside this file, add this line:<br>\\n<code>NODE_PATH=src/</code></p>\\n<p>or you can do it all at once on the command line with  <code>echo 'NODE_PATH=src/' >> .env</code></p>\\n<p>Sidenote: the <code>>></code>operator will append to the end of the file in case you already have a <code>.env</code> file with stuff in it, like if you're using <code>custom-react-scripts</code> to enable bonus features in your CRA.</p>\\n<p>So yeah, now you can go through your components and clean up all the relative imports as applicable. Remember though, depending on how things are nested it may make more sense to use a <code>../</code> instead of <code>components/Parent/components/Child</code>. Use your best judgement. I trust you.</p>\",\"id\":\"/Users/taylor/Documents/Projects/taylorlistens/src/pages/2017-09-13-node-path-imports/index.md absPath of file >>> MarkdownRemark\",\"frontmatter\":{\"date\":\"2017-09-13T16:04:25.113Z\",\"path\":\"/node-path-imports\",\"title\":\"NODE_PATH Imports\",\"excerpt\":\"`NODE_PATH` is actually way easier than I thought.\",\"tags\":[\"javascript\",\"create-react-app\"]}}],\"tagName\":\"javascript\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---tags-javascript-6bcf595edfa46d6f602c.js","module.exports = {\"pathContext\":{\"posts\":[{\"html\":\"<h2>Run <code>npm init</code></h2>\\n<p>The first thing I do when starting a new command line node project is to run\\n<code>npm init</code>.</p>\\n<p>This command starts a utility that creates a <code>package.json</code> file for the project. When you run it, you'll be prompted for the answers to several different questions. Hitting enter will accept the default, which is fine. The only thing I change is setting the entry point to <code>src/index.js</code>. If you hit enter too fast, you can always manually edit the <code>package.json</code> file later.</p>\\n<h2>Create the <code>src</code> Directory</h2>\\n<p>Next I create the <code>src</code> folder with <code>mkdir src</code>. I like to put my source code in this directory to avoid having the <code>node_modules</code> directory indexed when I'm using my editor later. I also run <code>touch src/index.js</code> to create a placeholder for the file. If I'm writing a program that has output, I'll also create an <code>output</code> directory in the root of the project.</p>\\n<h2>Starting Version Control</h2>\\n<p>Even if I'm not planning on uploading my code to GitHub, I typically will start tracking by running <code>git init</code> in the root of my project. This will create an empty repository so you can start tracking changes. If you decide to add a GitHub repo later, you can edit the git config to get it set up.</p>\\n<p>When creating a new repository on GitHub, I initialize it without a README or <code>.gitignore</code> file in favor of doing them myself manually later.</p>\\n<p>To add a GitHub repo to the project later, run</p>\\n<pre><code>git remote add origin git@github.com:username/repo-name.git\\n</code></pre>\\n<h2>Adding a <code>.gitignore</code> File</h2>\\n<p>I typically add a <code>.gitignore</code> file that contains the following:</p>\\n<pre><code>node_modules/\\n.env\\n</code></pre>\\n<h2>Finished</h2>\\n<p>That's pretty much it!</p>\",\"id\":\"/Users/taylor/Documents/Projects/taylorlistens/src/pages/2018-06-27-starting-a-nodejs-project/index.md absPath of file >>> MarkdownRemark\",\"frontmatter\":{\"date\":\"2018-06-27T17:30:59.377Z\",\"path\":\"/starting-a-nodejs-project\",\"title\":\"Starting A Node.js Project\",\"excerpt\":null,\"tags\":[\"javascript\",\"nodejs\"]}},{\"html\":\"<p>I made a fork of <a href=\\\"https://github.com/tayiorbeii/tachyons-as-props\\\"><code>tachyons-as-props</code></a> in my quest to replace tachyons + sass with glamorous.</p>\\n<p>A nice way to work on a <code>node_module</code> locally without having to publish it is to use <code>yarn link</code> (or <code>npm link</code> if you're so inclined).</p>\\n<p>The steps are pretty easy:</p>\\n<ol>\\n<li>\\n<p>Go to the local folder of the module you are currently working on:</p>\\n<ul>\\n<li><code>cd module_in_progress</code></li>\\n</ul>\\n</li>\\n<li>\\n<p>Type <code>yarn link</code></p>\\n<ul>\\n<li>You should see a \\\"success\\\" message</li>\\n</ul>\\n</li>\\n<li>\\n<p>Go to your consuming project's folder</p>\\n<ul>\\n<li><code>cd my_project</code></li>\\n</ul>\\n</li>\\n<li>Type <code>yarn link module_in_progress</code></li>\\n</ol>\\n<p>Now if you <code>ls node_modules</code> in your consuming project's folder, you should see that <code>module_in_progress</code> has been symlinked to its folder (as opposed to being installed as normal).</p>\",\"id\":\"/Users/taylor/Documents/Projects/taylorlistens/src/pages/2017-09-13-yarn-link/index.md absPath of file >>> MarkdownRemark\",\"frontmatter\":{\"date\":\"2017-09-13T18:33:28.522Z\",\"path\":\"/yarn-link\",\"title\":\"`yarn link` for npm Module Development\",\"excerpt\":\"\",\"tags\":[\"javascript\",\"npm\"]}},{\"html\":\"<h1><code>NODE_PATH</code> for avoiding <code>../../../</code></h1>\\n<p>When copying out a big component with several subcomponents to a separate <code>create-react-app</code> project, I found myself using tons of relative imports. Counting up &#x26; overs sucks.</p>\\n<p>To help with this, create a <code>.env</code> file in the root of your <code>create-react-app</code> project. Inside this file, add this line:<br>\\n<code>NODE_PATH=src/</code></p>\\n<p>or you can do it all at once on the command line with  <code>echo 'NODE_PATH=src/' >> .env</code></p>\\n<p>Sidenote: the <code>>></code>operator will append to the end of the file in case you already have a <code>.env</code> file with stuff in it, like if you're using <code>custom-react-scripts</code> to enable bonus features in your CRA.</p>\\n<p>So yeah, now you can go through your components and clean up all the relative imports as applicable. Remember though, depending on how things are nested it may make more sense to use a <code>../</code> instead of <code>components/Parent/components/Child</code>. Use your best judgement. I trust you.</p>\",\"id\":\"/Users/taylor/Documents/Projects/taylorlistens/src/pages/2017-09-13-node-path-imports/index.md absPath of file >>> MarkdownRemark\",\"frontmatter\":{\"date\":\"2017-09-13T16:04:25.113Z\",\"path\":\"/node-path-imports\",\"title\":\"NODE_PATH Imports\",\"excerpt\":\"`NODE_PATH` is actually way easier than I thought.\",\"tags\":[\"javascript\",\"create-react-app\"]}}],\"tagName\":\"javascript\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/tags-javascript.json\n// module id = 378\n// module chunks = 67335324583948"],"sourceRoot":""}