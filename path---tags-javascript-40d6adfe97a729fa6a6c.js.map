{"version":3,"sources":["webpack:///path---tags-javascript-40d6adfe97a729fa6a6c.js","webpack:///./.cache/json/tags-javascript.json"],"names":["webpackJsonp","338","module","exports","pathContext","posts","html","id","frontmatter","date","path","title","excerpt","tags","tagName"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,aAAeC,QAAUC,KAAA,ygCAAAC,GAAA,4HAAAC,aAAiqCC,KAAA,2BAAAC,KAAA,aAAAC,MAAA,yCAAAC,QAAA,GAAAC,MAAA,uBAAmJP,KAAA,slCAAkQC,GAAA,oIAAAC,aAAm/BC,KAAA,2BAAAC,KAAA,qBAAAC,MAAA,oBAAAC,QAAA,qDAAAC,MAAA,oCAAmMC,QAAA","file":"path---tags-javascript-40d6adfe97a729fa6a6c.js","sourcesContent":["webpackJsonp([67335324583948],{\n\n/***/ 338:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"pathContext\":{\"posts\":[{\"html\":\"<p>I made a fork of <a href=\\\"https://github.com/tayiorbeii/tachyons-as-props\\\"><code>tachyons-as-props</code></a> in my quest to replace tachyons + sass with glamorous.</p>\\n<p>A nice way to work on a <code>node_module</code> locally without having to publish it is to use <code>yarn link</code> (or <code>npm link</code> if you're so inclined).</p>\\n<p>The steps are pretty easy:</p>\\n<ol>\\n<li>\\n<p>Go to the local folder of the module you are currently working on:</p>\\n<ul>\\n<li><code>cd module_in_progress</code></li>\\n</ul>\\n</li>\\n<li>\\n<p>Type <code>yarn link</code></p>\\n<ul>\\n<li>You should see a \\\"success\\\" message</li>\\n</ul>\\n</li>\\n<li>\\n<p>Go to your consuming project's folder</p>\\n<ul>\\n<li><code>cd my_project</code></li>\\n</ul>\\n</li>\\n<li>Type <code>yarn link module_in_progress</code></li>\\n</ol>\\n<p>Now if you <code>ls node_modules</code> in your consuming project's folder, you should see that <code>module_in_progress</code> has been symlinked to its folder (as opposed to being installed as normal).</p>\",\"id\":\"/Users/taylor/Documents/Projects/taylorlistens/src/pages/2017-09-13-yarn-link/index.md absPath of file >>> MarkdownRemark\",\"frontmatter\":{\"date\":\"2017-09-13T18:33:28.522Z\",\"path\":\"/yarn-link\",\"title\":\"`yarn link` for npm Module Development\",\"excerpt\":\"\",\"tags\":[\"javascript\",\"npm\"]}},{\"html\":\"<h1><code>NODE_PATH</code> for avoiding <code>../../../</code></h1>\\n<p>When copying out a big component with several subcomponents to a separate <code>create-react-app</code> project, I found myself using tons of relative imports. Counting up &#x26; overs sucks.</p>\\n<p>To help with this, create a <code>.env</code> file in the root of your <code>create-react-app</code> project. Inside this file, add this line:<br>\\n<code>NODE_PATH=src/</code></p>\\n<p>or you can do it all at once on the command line with  <code>echo 'NODE_PATH=src/' >> .env</code></p>\\n<p>Sidenote: the <code>>></code>operator will append to the end of the file in case you already have a <code>.env</code> file with stuff in it, like if you're using <code>custom-react-scripts</code> to enable bonus features in your CRA.</p>\\n<p>So yeah, now you can go through your components and clean up all the relative imports as applicable. Remember though, depending on how things are nested it may make more sense to use a <code>../</code> instead of <code>components/Parent/components/Child</code>. Use your best judgement. I trust you.</p>\",\"id\":\"/Users/taylor/Documents/Projects/taylorlistens/src/pages/2017-09-13-node-path-imports/index.md absPath of file >>> MarkdownRemark\",\"frontmatter\":{\"date\":\"2017-09-13T16:04:25.113Z\",\"path\":\"/node-path-imports\",\"title\":\"NODE_PATH Imports\",\"excerpt\":\"`NODE_PATH` is actually way easier than I thought.\",\"tags\":[\"javascript\",\"create-react-app\"]}}],\"tagName\":\"javascript\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---tags-javascript-40d6adfe97a729fa6a6c.js","module.exports = {\"pathContext\":{\"posts\":[{\"html\":\"<p>I made a fork of <a href=\\\"https://github.com/tayiorbeii/tachyons-as-props\\\"><code>tachyons-as-props</code></a> in my quest to replace tachyons + sass with glamorous.</p>\\n<p>A nice way to work on a <code>node_module</code> locally without having to publish it is to use <code>yarn link</code> (or <code>npm link</code> if you're so inclined).</p>\\n<p>The steps are pretty easy:</p>\\n<ol>\\n<li>\\n<p>Go to the local folder of the module you are currently working on:</p>\\n<ul>\\n<li><code>cd module_in_progress</code></li>\\n</ul>\\n</li>\\n<li>\\n<p>Type <code>yarn link</code></p>\\n<ul>\\n<li>You should see a \\\"success\\\" message</li>\\n</ul>\\n</li>\\n<li>\\n<p>Go to your consuming project's folder</p>\\n<ul>\\n<li><code>cd my_project</code></li>\\n</ul>\\n</li>\\n<li>Type <code>yarn link module_in_progress</code></li>\\n</ol>\\n<p>Now if you <code>ls node_modules</code> in your consuming project's folder, you should see that <code>module_in_progress</code> has been symlinked to its folder (as opposed to being installed as normal).</p>\",\"id\":\"/Users/taylor/Documents/Projects/taylorlistens/src/pages/2017-09-13-yarn-link/index.md absPath of file >>> MarkdownRemark\",\"frontmatter\":{\"date\":\"2017-09-13T18:33:28.522Z\",\"path\":\"/yarn-link\",\"title\":\"`yarn link` for npm Module Development\",\"excerpt\":\"\",\"tags\":[\"javascript\",\"npm\"]}},{\"html\":\"<h1><code>NODE_PATH</code> for avoiding <code>../../../</code></h1>\\n<p>When copying out a big component with several subcomponents to a separate <code>create-react-app</code> project, I found myself using tons of relative imports. Counting up &#x26; overs sucks.</p>\\n<p>To help with this, create a <code>.env</code> file in the root of your <code>create-react-app</code> project. Inside this file, add this line:<br>\\n<code>NODE_PATH=src/</code></p>\\n<p>or you can do it all at once on the command line with  <code>echo 'NODE_PATH=src/' >> .env</code></p>\\n<p>Sidenote: the <code>>></code>operator will append to the end of the file in case you already have a <code>.env</code> file with stuff in it, like if you're using <code>custom-react-scripts</code> to enable bonus features in your CRA.</p>\\n<p>So yeah, now you can go through your components and clean up all the relative imports as applicable. Remember though, depending on how things are nested it may make more sense to use a <code>../</code> instead of <code>components/Parent/components/Child</code>. Use your best judgement. I trust you.</p>\",\"id\":\"/Users/taylor/Documents/Projects/taylorlistens/src/pages/2017-09-13-node-path-imports/index.md absPath of file >>> MarkdownRemark\",\"frontmatter\":{\"date\":\"2017-09-13T16:04:25.113Z\",\"path\":\"/node-path-imports\",\"title\":\"NODE_PATH Imports\",\"excerpt\":\"`NODE_PATH` is actually way easier than I thought.\",\"tags\":[\"javascript\",\"create-react-app\"]}}],\"tagName\":\"javascript\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/tags-javascript.json\n// module id = 338\n// module chunks = 67335324583948"],"sourceRoot":""}